// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const originManufacturerID = accounts[1];
    const originManufacturerName = "Manish Bisht";
    const originManufacturerInformation = "Bangalore, India";
    const originManufacturerLatitude = "12.9079089";
    const originManufacturerLongitude = "77.6395349";
    var productID = sku + upc;
    const productNotes = "UCB Jeans";
    const productPrice = web3.utils.toWei("1", "ether");
    var itemState = 0;
    const retailerID = accounts[2];
    const customerID = accounts[3];
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...");
    console.log("Contract Owner: accounts[0] ", accounts[0]);
    console.log("Manufacturer: accounts[1] ", accounts[1]);
    console.log("Retailer: accounts[2] ", accounts[2]);
    console.log("Customer: accounts[3] ", accounts[3]);

    // 1st Test
    it("Testing smart contract function processItem() that allows a manufacturer to process the item", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Processed()
        var event = supplyChain.Processed();
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.processItem(upc, originManufacturerID, originManufacturerName, originManufacturerInformation, originManufacturerLatitude, originManufacturerLongitude);
        // await supplyChain.addItemHistory(upc, txHash);
        // console.log(await supplyChain.getItemHistory(upc));

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBuffer[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBuffer[2], originManufacturerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBuffer[3], originManufacturerID, 'Error: Missing or Invalid ManufacturerID');
        assert.equal(resultBuffer[4], originManufacturerName, 'Error: Missing or Invalid ManufacturerName');
        assert.equal(resultBuffer[5], itemState, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 2nd Test
    it("Testing smart contract function packItem() that allows a manufacturer to pack the item", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Packed()
        var event = supplyChain.Packed();
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: originManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[5], 1, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    });

    // 3rd Test
    it("Testing smart contract function addItem() that allows a manufacturer to add item", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Added()
        var event = supplyChain.Added();
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Added by calling function addItem()
        await supplyChain.addItem(upc, productPrice, retailerID, {from: originManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[5], 2, 'Error: Invalid item State');
        assert.equal(resultBuffer[6], productPrice, 'Error: Invalid item price');
        assert.equal(resultBuffer[7], retailerID, 'Error: Missing or Invalid retailer ID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    });

    // 4th Test
    it("Testing smart contract function receiveItem() that allows a retailer to receive the item", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Received()
        var event = supplyChain.Received();
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, productNotes, {from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[5], 3, 'Error: Invalid item State');
        assert.equal(resultBuffer[7], retailerID, 'Error: Missing or Invalid retailer ID');
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    });

    // 5th Test
    it("Testing smart contract function shipItem() that allows a retailer to ship the item", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped();
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Sold by calling function shipItem()
        await supplyChain.shipItem(upc, customerID, {from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[5], 4, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 6th Test
    it("Testing smart contract function buyItem() that allows a customer to buy the item", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Watch the emitted event Delivered()
        var event = supplyChain.Delivered();
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: customerID, value: web3.utils.toWei("10", "ether")});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);

        // Verify the result set
        assert.equal(resultBuffer[5], 5, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    });

    // 7th Test
    it("Testing smart contract function fetchItem() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBuffer = await supplyChain.fetchItem.call(upc);
        const itemDetails = await  supplyChain.fetchItemDetails.call(upc);

        // Verify the result set:
        assert.equal(resultBuffer[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBuffer[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBuffer[2], customerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBuffer[3], originManufacturerID, 'Error: Missing or Invalid ManufacturerID');
        assert.equal(resultBuffer[4], originManufacturerName, 'Error: Missing or Invalid ManufacturerName');
        assert.equal(resultBuffer[5], 5, 'Error: Invalid item State');
        assert.equal(resultBuffer[6], productPrice, 'Error: Invalid item price');
        assert.equal(resultBuffer[7], retailerID, 'Error: Missing or Invalid retailer ID');
        assert.equal(resultBuffer[8], customerID, 'Error: Missing or Invalid customer ID');

        assert.equal(itemDetails[0], productID, 'Error: Invalid item productID');
        assert.equal(itemDetails[1], upc, 'Error: Invalid item UPC');
        assert.equal(itemDetails[2], productPrice, 'Error: Missing or Invalid productPrice');
        assert.equal(itemDetails[3], productNotes, 'Error: Missing or Invalid productNotes');
        assert.equal(itemDetails[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName');
        assert.equal(itemDetails[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation');
        assert.equal(itemDetails[6], originManufacturerLatitude, 'Error: Missing or Invalid originManufacturerLatitude');
        assert.equal(itemDetails[7], originManufacturerLongitude, 'Error: Missing or Invalid originManufacturerLongitude');
    });
});
